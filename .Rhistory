data(mpg)
library("tidyverse")
data(mpg)
library("tidyverse")
mpg
mpg %>% #pipe operardor "luego"
add_row(manufacturer = "jeep",
displ = 2,
year  = 2008,
cyl   = 4,
trans = "manual(m6)",
cty = 15,
hwy = 24,
fl = "p",
class = "suv"
)
mpg
mpg %>%
mutate(
cty = cty * 1.609 / 3.785,
hwy = hwy * 1.609 / 3.785,
manufacturer = as_factor(manufacturer),
model = as_factor(model),
)
mpg_editada <- mpg  %>% # Convierte las columnas que son caracter a factores mutate IF
mutate_if(
.predicate = is.character,
.funs = as_factor
)
mpg_editada
mpg_editada2 <- mpg  %>%
mutate_if(
.predicate = is.character,
.funs = as_factor
) %>%
mutate(trans = fct_lump_min(trans, 20,
other_level = "Otros"))
mpg_editada2
mpg_editada2  %>%
ggplot() +
geom_point(mapping = aes(x = displ, y = hwy))
mpg_editada2  %>%
ggplot(mapping = aes(x = displ, y = hwy)) +
geom_line()
mpg_editada2  %>%
ggplot() +
geom_point(mapping = aes(x = displ,
y = hwy,
color = class)
)
ggplot(data = mpg_editada2) +
geom_point(mapping = aes(x = displ,
y = hwy,
color = class,
shape = drv,
size = cyl),
alpha = 0.7)
install.packages("patchwork")
mpg_editada2  %>%
ggplot(aes(x = manufacturer, y = displ)) +
geom_boxplot()
install.packages("tidyverts")
library(tsibble)
install.packages("tidyverts")
library(tsibble)
data(world_bank_pop, package = "tidyr")
pop <- world_bank_pop
pop_tidy <- pop
#i）
#ii）
pivot_longer (cols = -c(country, indicator),
names _to = "year", values _to = "value")
library(tsibble)
data(world_bank_pop, package = "tidyr")
pop <- world_bank_pop
pop_tidy
library(tsibble)
data(world_bank_pop, package = "tidyr")
pop <- world_bank_pop
pop_tidy <- pop
#i）
#ii）
pivot_longer (cols = -c(country, indicator),
names _to = "year", values _to = "value")
library(tsibble)
data(world_bank_pop, package = "tidyr")
pop <- world_bank_pop
pop_tidy <- pop
#i）
#ii）
pivot_longer (cols = -c(country, indicator),
names_to = "year", values _to = "value")
library(tidyverse)
library(ggplot2)
library(tsibble)
library(fabletools)
library(readxl)
library(openxlsx)
amzn_csv <- read.csv("AMZN.csv")
library(tidyverse)
library(ggplot2)
library(tsibble)
library(fabletools)
library(readxl)
library(openxlsx)
amzn_csv <- read.csv("AMZN.csv")
amzn_csv
amzn_csv$Date = ymd(amzn_csv$Date)
amzn <- amzn_csv %>%
as_tsibble(index = Date)
amzn
class(amzn)
amzn |>
autoplot(Close) +
labs(y = "Prices", title = "Historic Prices AMZN")
library(tidyverse)
library(ggplot2)
library(tsibble)
library(fabletools)
library(readxl)
library(openxlsx)
amzn_csv <- read.csv("AMZN.csv")
amzn_csv.head()
library(tidyverse)
library(ggplot2)
library(tsibble)
library(fabletools)
library(readxl)
library(openxlsx)
amzn_csv <- read.csv("AMZN.csv")
amzn_csv.head
library(tidyverse)
library(ggplot2)
library(tsibble)
library(fabletools)
library(readxl)
library(openxlsx)
amzn_csv <- read.csv("AMZN.csv")
head.amzn_csv
library(tidyverse)
library(ggplot2)
library(tsibble)
library(fabletools)
library(readxl)
library(openxlsx)
amzn_csv <- read.csv("AMZN.csv")
amzn_csv$Date = ymd(amzn_csv$Date)
amzn <- amzn_csv %>%
as_tsibble(index = Date)
amzn
class(amzn)
amzn |>
autoplot(Close) +
labs(y = "Prices", title = "Historic Prices AMZN")
library(tidyverse)
library(ggplot2)
library(tsibble)
library(fabletools)
library(readxl)
library(openxlsx)
amzn_csv <- read.csv("AMZN.csv")
amzn_csv$Date = ymd(amzn_csv$Date)
amzn <- amzn_csv %>%
as_tsibble(index = Date)
amzn
class(amzn)
amzn |>
autoplot(Close) +
labs(y = "Prices", title = "Historic Prices AMZN")
feasts::autoplot(amzn) + ggtitle('Historical graphic AMZN') + ylab('Prices') + xlab('Date')
library(tsibble)
library(feasts)
library(plotly)
amzn$Adj.Close = as.numeric(amzn$Adj.Close)
head(amzn, 2)
amzn_filled <- fill_gaps(amzn)
amzn_filled %>%
gg_season(Adj.Close, labels = "both") +
ggtitle('Historical graphic AMZN') +
ylab('Price') + xlab('Date')
yearly_amzn_plot = amzn_filled %>% gg_season(Adj.Close, labels = "both") +
ggtitle('Yearly historical graphic AMZN ') + ylab('Date') + xlab('Price')
ggplotly(yearly_amzn_plot)
lags_plots = amzn_filled  %>%
filter(year(Date) > 2022) %>%
gg_lag(Adj.Close, geom = "point", lags = 1:12) +
labs(x ="lag(Precio, k)")
suppressWarnings(ggplotly(lags_plots))
amzn_filled %>% ACF(Adj.Close, lag_max = 12)
amzn_filled %>% ACF(Adj.Close, lag_max = 24) %>% autoplot() + labs(title='Historical price AMZN')
summary(amzn$Adj.Close, 'value')
library(EnvStats)
kurtosis(amzn$Adj.Close)
skewness(amzn$Adj.Close)
sd(amzn$Adj.Close)
var(amzn$Adj.Close)
library(ggExtra)
p <- ggplot(amzn_filled, aes(x=Date, y=Adj.Close)) +
geom_hline(yintercept =25) +
geom_hline(yintercept =150) +
geom_point() +
ggtitle('Historical graphic AMZN') + ylab('Price') + xlab('Date')
ggMarginal(p, type='histogram', margins = 'y')
histogram = ggplot(amzn_filled, aes(x = Adj.Close)) +
geom_histogram( bins = 20, fill = "black", color = "black", alpha = 0.5) +
labs(title = "Histograma",
x = "Price",
y = "Densidad")
ggplotly(histogram)
amzn_filled2$Adj.Close <- ifelse(is.na(amzn_filled$Adj.Close), 0, amzn_filled2$Adj.Close)
amzn_filled2 <- ifelse(is.na(amzn_filled$Adj.Close), 0, amzn_filled2$Adj.Close)
amzn_filled2 <- ifelse(is.na(amzn_filled$Adj.Close), 0, amzn_filled2$Adj.Close)
amzn_filled2 <- ifelse(is.na(amzn_filled$Adj.Close), 0, amzn_filled2$Adj.Close)
p <- amzn_filled2 %>% as_tibble %>% group_by(years=year(Date)) %>%
summarise(precios=sum(Adj.Close)) %>%
arrange(desc(years))%>%
mutate(change = (precios/lead(precios) - 1) * 100) %>%
filter(years > 2000) %>%
filter(years < 2023)
library(tidyverse)
library(ggplot2)
library(tsibble)
library(fabletools)
library(readxl)
library(openxlsx)
amzn_csv <- read.csv("AMZN.csv")
amzn_csv$Date = ymd(amzn_csv$Date)
amzn <- amzn_csv %>%
as_tsibble(index = Date)
amzn
class(amzn)
amzn |>
autoplot(Close) +
labs(y = "Prices", title = "Historic Prices AMZN")
feasts::autoplot(amzn) + ggtitle('Historical graphic AMZN') + ylab('Prices') + xlab('Date')
library(tsibble)
library(feasts)
library(plotly)
amzn$Adj.Close = as.numeric(amzn$Adj.Close)
head(amzn, 2)
amzn_filled <- fill_gaps(amzn)
amzn_filled %>%
gg_season(Adj.Close, labels = "both") +
ggtitle('Historical graphic AMZN') +
ylab('Price') + xlab('Date')
yearly_amzn_plot = amzn_filled %>% gg_season(Adj.Close, labels = "both") +
ggtitle('Yearly historical graphic AMZN ') + ylab('Date') + xlab('Price')
ggplotly(yearly_amzn_plot)
lags_plots = amzn_filled  %>%
filter(year(Date) > 2022) %>%
gg_lag(Adj.Close, geom = "point", lags = 1:12) +
labs(x ="lag(Precio, k)")
suppressWarnings(ggplotly(lags_plots))
amzn_filled %>% ACF(Adj.Close, lag_max = 12)
amzn_filled %>% ACF(Adj.Close, lag_max = 24) %>% autoplot() + labs(title='Historical price AMZN')
summary(amzn$Adj.Close, 'value')
library(EnvStats)
kurtosis(amzn$Adj.Close)
skewness(amzn$Adj.Close)
sd(amzn$Adj.Close)
var(amzn$Adj.Close)
library(ggExtra)
p <- ggplot(amzn_filled, aes(x=Date, y=Adj.Close)) +
geom_hline(yintercept =25) +
geom_hline(yintercept =150) +
geom_point() +
ggtitle('Historical graphic AMZN') + ylab('Price') + xlab('Date')
ggMarginal(p, type='histogram', margins = 'y')
histogram = ggplot(amzn_filled, aes(x = Adj.Close)) +
geom_histogram( bins = 20, fill = "black", color = "black", alpha = 0.5) +
labs(title = "Histograma",
x = "Price",
y = "Densidad")
ggplotly(histogram)
amzn_filled2 <- ifelse(is.na(amzn_filled$Adj.Close), 0, amzn_filled2$Adj.Close)
amzn_filled2 <- ifelse(is.na(amzn_filled$Adj.Close), 0, amzn_filled$Adj.Close)
library(tidyverse)
library(ggplot2)
library(tsibble)
library(fabletools)
library(readxl)
library(openxlsx)
amzn_csv <- read.csv("AMZN.csv")
amzn_csv$Date = ymd(amzn_csv$Date)
amzn <- amzn_csv %>%
as_tsibble(index = Date)
amzn
class(amzn)
amzn |>
autoplot(Close) +
labs(y = "Prices", title = "Historic Prices AMZN")
feasts::autoplot(amzn) + ggtitle('Historical graphic AMZN') + ylab('Prices') + xlab('Date')
library(tsibble)
library(feasts)
library(plotly)
amzn$Adj.Close = as.numeric(amzn$Adj.Close)
head(amzn, 2)
amzn_filled <- fill_gaps(amzn)
amzn_filled %>%
gg_season(Adj.Close, labels = "both") +
ggtitle('Historical graphic AMZN') +
ylab('Price') + xlab('Date')
yearly_amzn_plot = amzn_filled %>% gg_season(Adj.Close, labels = "both") +
ggtitle('Yearly historical graphic AMZN ') + ylab('Date') + xlab('Price')
ggplotly(yearly_amzn_plot)
lags_plots = amzn_filled  %>%
filter(year(Date) > 2022) %>%
gg_lag(Adj.Close, geom = "point", lags = 1:12) +
labs(x ="lag(Precio, k)")
suppressWarnings(ggplotly(lags_plots))
amzn_filled %>% ACF(Adj.Close, lag_max = 12)
amzn_filled %>% ACF(Adj.Close, lag_max = 24) %>% autoplot() + labs(title='Historical price AMZN')
summary(amzn$Adj.Close, 'value')
library(EnvStats)
kurtosis(amzn$Adj.Close)
skewness(amzn$Adj.Close)
sd(amzn$Adj.Close)
var(amzn$Adj.Close)
library(ggExtra)
p <- ggplot(amzn_filled, aes(x=Date, y=Adj.Close)) +
geom_hline(yintercept =25) +
geom_hline(yintercept =150) +
geom_point() +
ggtitle('Historical graphic AMZN') + ylab('Price') + xlab('Date')
ggMarginal(p, type='histogram', margins = 'y')
histogram = ggplot(amzn_filled, aes(x = Adj.Close)) +
geom_histogram( bins = 20, fill = "black", color = "black", alpha = 0.5) +
labs(title = "Histograma",
x = "Price",
y = "Densidad")
ggplotly(histogram)
amzn_filled2 <- ifelse(is.na(amzn_filled$Adj.Close), 0, amzn_filled$Adj.Close)
p <- amzn_filled2 %>% as_tibble %>% group_by(years=year(Date)) %>%
summarise(precios=sum(Adj.Close)) %>%
arrange(desc(years))%>%
mutate(change = (precios/lead(precios) - 1) * 100) %>%
filter(years > 2000) %>%
filter(years < 2023)
amzn_filled2 <- ifelse(is.na(amzn_filled$Adj.Close), 0, amzn_filled$Adj.Close)
p <- amzn_filled2 %>% as_tibble %>% group_by(years=year(Date)) %>%
summarise(precios=sum(Adj.Close)) %>%
arrange(desc(years))%>%
mutate(change = (precios/lead(precios) - 1) * 100) %>%
filter(years > 2000) %>%
filter(years < 2023)
amzn_filled2 <- amzn_filled
amzn_filled2$Adj.Close <- ifelse(is.na(amzn_filled2$Adj.Close), 0, amzn_filled2$Adj.Close)
p <- amzn_filled2 %>% as_tibble %>% group_by(years=year(Date)) %>%
summarise(precios=sum(Adj.Close)) %>%
arrange(desc(years))%>%
mutate(change = (precios/lead(precios) - 1) * 100) %>%
filter(years > 2000) %>%
filter(years < 2023)
mean_growth <- amzn_filled2 %>% as_tibble %>% group_by(years=year(Date)) %>%
summarise(precios=sum(Adj.Close)) %>%
arrange(desc(years))%>%
mutate(change = (precios/lead(precios) - 1) * 100) %>%
filter(years > 2000) %>%
filter(years < 2023) %>%
summarise(mean(change))
mean_growth <- mean_growth$`mean(change)`
ggplot(p, aes(x=years, y=change)) +
geom_line() +
geom_hline(yintercept=mean_growth) +
geom_hline(yintercept=0) +
ggtitle('Cambio porcentual por año') + ylab('%') + xlab('Mes')
library(tidyverse)
library(ggplot2)
library(tsibble)
library(fabletools)
library(readxl)
library(openxlsx)
amzn_csv <- read.csv("AMZN.csv")
amzn_csv$Date = ymd(amzn_csv$Date)
amzn <- amzn_csv %>%
as_tsibble(index = Date)
amzn
class(amzn)
amzn |>
autoplot(Close) +
labs(y = "Prices", title = "Historic Prices AMZN")
feasts::autoplot(amzn) + ggtitle('Historical graphic AMZN') + ylab('Prices') + xlab('Date')
library(tsibble)
library(feasts)
library(plotly)
amzn$Adj.Close = as.numeric(amzn$Adj.Close)
head(amzn, 2)
amzn_filled <- fill_gaps(amzn)
amzn_filled %>%
gg_season(Adj.Close, labels = "both") +
ggtitle('Historical graphic AMZN') +
ylab('Price') + xlab('Date')
yearly_amzn_plot = amzn_filled %>% gg_season(Adj.Close, labels = "both") +
ggtitle('Yearly historical graphic AMZN ') + ylab('Date') + xlab('Price')
ggplotly(yearly_amzn_plot)
lags_plots = amzn_filled  %>%
filter(year(Date) > 2022) %>%
gg_lag(Adj.Close, geom = "point", lags = 1:12) +
labs(x ="lag(Precio, k)")
suppressWarnings(ggplotly(lags_plots))
amzn_filled %>% ACF(Adj.Close, lag_max = 12)
amzn_filled %>% ACF(Adj.Close, lag_max = 24) %>% autoplot() + labs(title='Historical price AMZN')
summary(amzn$Adj.Close, 'value')
library(EnvStats)
kurtosis(amzn$Adj.Close)
skewness(amzn$Adj.Close)
sd(amzn$Adj.Close)
var(amzn$Adj.Close)
library(ggExtra)
p <- ggplot(amzn_filled, aes(x=Date, y=Adj.Close)) +
geom_hline(yintercept =25) +
geom_hline(yintercept =150) +
geom_point() +
ggtitle('Historical graphic AMZN') + ylab('Price') + xlab('Date')
ggMarginal(p, type='histogram', margins = 'y')
histogram = ggplot(amzn_filled, aes(x = Adj.Close)) +
geom_histogram( bins = 20, fill = "black", color = "black", alpha = 0.5) +
labs(title = "Histograma",
x = "Price",
y = "Densidad")
ggplotly(histogram)
amzn_filled2 <- amzn_filled
amzn_filled2$Adj.Close <- ifelse(is.na(amzn_filled2$Adj.Close), 0, amzn_filled2$Adj.Close)
p <- amzn_filled2 %>% as_tibble %>% group_by(years=year(Date)) %>%
summarise(precios=sum(Adj.Close)) %>%
arrange(desc(years))%>%
mutate(change = (precios/lead(precios) - 1) * 100) %>%
filter(years > 2000) %>%
filter(years < 2023)
mean_growth <- amzn_filled2 %>% as_tibble %>% group_by(years=year(Date)) %>%
summarise(precios=sum(Adj.Close)) %>%
arrange(desc(years))%>%
mutate(change = (precios/lead(precios) - 1) * 100) %>%
filter(years > 2000) %>%
filter(years < 2023) %>%
summarise(mean(change))
mean_growth <- mean_growth$`mean(change)`
ggplot(p, aes(x=years, y=change)) +
geom_line() +
geom_hline(yintercept=mean_growth) +
geom_hline(yintercept=0) +
ggtitle('Cambio porcentual por año') + ylab('%') + xlab('Mes')
train <- amzn_filled %>% select(Adj.Close) %>% filter_index("2000 Jan" ~ "2023 Dec")
test <- amzn_filled %>% select(Adj.Close) %>% filter_index("2023 Jul" ~ "2023 Dec")
tstng_prds <- 6
frcst_prds <- 6
library(fable)
models_fit <- train %>%
model(`Seasonal naive` = SNAIVE(Adj.Close))
models_tst <- models_fit %>% forecast(h = tstng_prds)
snaive_plot <- models_tst %>% autoplot(filter_index(amzn_filled, "2023 Jan" ~ "2023 Dec")) +
ggtitle('Seasonal Naive') + ylab('AMZN historical prices') + xlab('Mes')
snaive_plot
train %>%
model(SNAIVE(Adj.Close)) %>%
gg_tsresiduals()
stl_model = amzn_filled2 %>% dplyr::select(Adj.Close) %>% stl(s.window = 'per')
plot(stl_model,main = 'Descomposicón de la serie con STL')
qqnorm(amzn_filled$Adj.Close)
qqline(amzn_filled$Adj.Close)
bc <- EnvStats::boxcox(amzn$Adj.Close, lambda=c(-2, 2), optimize=TRUE, objective.name='Log-Likelihood')
bc_data <- EnvStats::boxcoxTransform(amzn$Adj.Close, bc$lambda)
skewness(bc_data)
qqnorm(bc_data)
qqline(bc_data)
library(fable)
models_fit <- train %>%
model(stlf = decomposition_model(
STL(Adj.Close ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust)
))
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(amzn, "2023 Jan" ~ .)) +
ggtitle('Seasonal Naive') + ylab('AMZN') + xlab('Mes')
snaive_plot
library(fable)
models_fit <- train %>%
model(stlf = decomposition_model(
STL(Adj.Close ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust)
))
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(amzn, "2023 Jan" ~ .)) +
ggtitle('Seasonal Naive') + ylab('AMZN') + xlab('Mes')
snaive_plot
models_fit <- train %>%
model(
`Seasonal naive` = SNAIVE(Adj.Close),
stlf = decomposition_model(
STL(Adj.Close ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust)),
log_stlf = decomposition_model(
STL(log(Adj.Close) ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust))
)
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(amzn, "2023 Jan" ~ "2023 Dec"), level = NULL) +
ggtitle('Diferentes modelos') + ylab('AMZN') + xlab('Mes')
snaive_plot
train %>%
model(decomposition_model(
STL(log(Adj.Close) ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust))) %>%
gg_tsresiduals()
